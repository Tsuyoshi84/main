name: Update Node.js & pnpm

on:
  workflow_dispatch:
    inputs:
      node_version:
        description: "Node.js version to update to"
        required: true
        default: "20.xx.xx"
      pnpm_version:
        description: "pnpm version to update to"
        required: true
        default: "9.xx.x"

jobs:
  update-tool-versions:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Git user
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Install gh CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Update repositories
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          NEW_NODE_VERSION: ${{ github.event.inputs.node_version }}
          NEW_PNPM_VERSION: ${{ github.event.inputs.pnpm_version }}
          DEFAULT_BRANCH: "main"
        run: |
          set -e
          REPOS=("Tsuyoshi84/sub1" "Tsuyoshi84/sub2")
          BRANCH_NAME="update-versions-$(date +%Y%m%d%H%M%S)"

          for REPO in "${REPOS[@]}"; do
            echo "Processing $REPO"
            REPO_URL="https://$GH_TOKEN@github.com/$REPO.git"

            # Shallow clone the default branch only
            git clone --depth 1 --branch $DEFAULT_BRANCH $REPO_URL
            REPO_NAME=$(basename $REPO)
            cd $REPO_NAME

            # Create a new branch from the updated main branch
            git checkout -b $BRANCH_NAME

            # Extract previous versions from .tool-versions
            if [ -f ".tool-versions" ]; then
              PREVIOUS_NODE_VERSION=$(grep '^nodejs ' .tool-versions | awk '{print $2}')
              PREVIOUS_PNPM_VERSION=$(grep '^pnpm ' .tool-versions | awk '{print $2}')
            else
              echo "Error: .tool-versions file not found in $REPO"
              exit 1
            fi

            # Determine which versions have changed
            NODE_UPDATED=false
            PNPM_UPDATED=false

            if [ "$PREVIOUS_NODE_VERSION" != "$NEW_NODE_VERSION" ]; then
              NODE_UPDATED=true
            fi

            if [ "$PREVIOUS_PNPM_VERSION" != "$NEW_PNPM_VERSION" ]; then
              PNPM_UPDATED=true
            fi

            # Update .tool-versions
            if [ -f ".tool-versions" ]; then
              echo "Updating .tool-versions"
              sed -i "s/^nodejs .*/nodejs $NEW_NODE_VERSION/" .tool-versions
              sed -i "s/^pnpm .*/pnpm $NEW_PNPM_VERSION/" .tool-versions
            else
              echo "Error: .tool-versions file not found in $REPO"
              exit 1
            fi

            # Update package.json
            if [ -f "package.json" ]; then
              # Update packageManager field using jq
              echo "Updating package.json"
              jq '.packageManager = "pnpm@'"$NEW_PNPM_VERSION"'"' package.json > package.json.tmp && mv package.json.tmp package.json
            else
              echo "Error: package.json file not found in $REPO"
              exit 1
            fi

            # Update Dockerfile
            if [ -f "Dockerfile" ]; then
              # Update the Node.js version in the Dockerfile
              echo "Updating Dockerfile"
              sed -i "s|^FROM node:.*-bookworm-slim AS base|FROM node:$NEW_NODE_VERSION-bookworm-slim AS base|" Dockerfile
            else
              echo "Warning: Dockerfile not found in $REPO. Skipping Dockerfile update."
            fi

            # Construct the commit message
            COMMIT_MESSAGE=""

            if [ "$NODE_UPDATED" = true ] && [ "$PNPM_UPDATED" = true ]; then
              COMMIT_MESSAGE="Update Node.js to $NEW_NODE_VERSION and pnpm to $NEW_PNPM_VERSION"
            elif [ "$NODE_UPDATED" = true ]; then
              COMMIT_MESSAGE="Update Node.js to $NEW_NODE_VERSION"
            elif [ "$PNPM_UPDATED" = true ]; then
              COMMIT_MESSAGE="Update pnpm to $NEW_PNPM_VERSION"
            fi

            git add .tool-versions package.json Dockerfile
            git commit -m "$COMMIT_MESSAGE"
            git push origin $BRANCH_NAME

            # Construct the PR title by prefixing 'chore:' to the commit message
            PR_TITLE="chore: $COMMIT_MESSAGE"

            # Construct the PR body
            PR_BODY="Update versions"

            if [ "$NODE_UPDATED" = true ]; then
              PR_BODY="$PR_BODY\n- Node.js: $PREVIOUS_NODE_VERSION -> $NEW_NODE_VERSION"
            fi

            if [ "$PNPM_UPDATED" = true ]; then
              PR_BODY="$PR_BODY\n- pnpm: $PREVIOUS_PNPM_VERSION -> $NEW_PNPM_VERSION"
            fi

            # Use printf to interpret \n
            PR_BODY=$(printf "$PR_BODY")

            # Create PR using GH_TOKEN for authentication
            gh pr create \
              --title "$PR_TITLE" \
              --body "$PR_BODY" \
              --head $BRANCH_NAME \
              --base $DEFAULT_BRANCH \
              --repo $REPO

            cd ..
          done
