name: Update Node.js & pnpm

on:
  workflow_dispatch:
    inputs:
      node_version:
        description: "Node.js version to update to"
        required: true
        default: "20.xx.xx"
      pnpm_version:
        description: "pnpm version to update to"
        required: true
        default: "9.xx.x"

jobs:
  update-tool-versions:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Git user
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Install gh CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Update repositories
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          NEW_NODE_VERSION: ${{ github.event.inputs.node_version }}
          NEW_PNPM_VERSION: ${{ github.event.inputs.pnpm_version }}
        run: |
          set -e
          REPOS=("Tsuyoshi84/sub1" "Tsuyoshi84/sub2")
          BRANCH_NAME="update-versions-$(date +%Y%m%d%H%M%S)"

          for REPO in "${REPOS[@]}"; do
            echo "Processing $REPO"
            git clone https://$GH_TOKEN@github.com/$REPO.git
            REPO_NAME=$(basename $REPO)
            cd $REPO_NAME

            # Ensure we're on the main branch
            git checkout main

            # Pull the latest changes from the remote main branch
            git pull origin main

            # Create a new branch from the updated main branch
            git checkout -b $BRANCH_NAME

            # Read previous versions
            if [ -f ".tool-versions" ]; then
              PREVIOUS_NODE_VERSION=$(grep '^nodejs ' .tool-versions | awk '{print $2}')
              PREVIOUS_PNPM_VERSION=$(grep '^pnpm ' .tool-versions | awk '{print $2}')
            else
              echo "Error: .tool-versions file not found in $REPO"
              exit 1
            fi

            # Update .tool-versions
            if [ -f ".tool-versions" ]; then
              echo "Updating .tool-versions"
              sed -i "s/^nodejs .*/nodejs $NEW_NODE_VERSION/" .tool-versions
              sed -i "s/^pnpm .*/pnpm $NEW_PNPM_VERSION/" .tool-versions
            else
              echo "Error: .tool-versions file not found in $REPO"
              exit 1
            fi

            # Update package.json
            if [ -f "package.json" ]; then
              # Update packageManager field using jq
              echo "Updating package.json"
              jq '.packageManager = "pnpm@'"$NEW_PNPM_VERSION"'"' package.json > package.json.tmp && mv package.json.tmp package.json
            else
              echo "Error: package.json file not found in $REPO"
              exit 1
            fi

            # Update Dockerfile
            if [ -f "Dockerfile" ]; then
              # Update the Node.js version in the Dockerfile
              echo "Updating Dockerfile"
              sed -i "s|^FROM node:.*-bookworm-slim AS base|FROM node:$NEW_NODE_VERSION-bookworm-slim AS base|" Dockerfile
            else
              echo "Warning: Dockerfile not found in $REPO. Skipping Dockerfile update."
            fi

            git add .tool-versions package.json Dockerfile
            git commit -m "Update Node.js to $NEW_NODE_VERSION, pnpm to $NEW_PNPM_VERSION"

            git push origin $BRANCH_NAME

            # Create the detailed PR body
            PR_BODY=$(cat <<EOF
            # Description
                    
            This PR updates the Node.js and pnpm versions used in the project to the specified versions:

            - **Node.js**: Updated from \`$PREVIOUS_NODE_VERSION\` to \`$NEW_NODE_VERSION\`
            - **pnpm**: Updated from \`$PREVIOUS_PNPM_VERSION\` to \`$NEW_PNPM_VERSION\`

            ### Changes Made

            The following files have been updated:

            1. **.tool-versions**
               - Updated \`nodejs\` version to \`$NEW_NODE_VERSION\`
               - Updated \`pnpm\` version to \`$NEW_PNPM_VERSION\`

            2. **package.json**
               - Updated \`packageManager\` field to \`pnpm@$NEW_PNPM_VERSION\`

            3. **Dockerfile**
               - Updated Node.js base image to \`node:$NEW_NODE_VERSION-bookworm-slim\`
            EOF
            )

            # Create PR using GH_TOKEN for authentication
            gh pr create \
              --title "chore: Update Node.js to $NEW_NODE_VERSION, pnpm to $NEW_PNPM_VERSION" \
              --body "$PR_BODY" \
              --head $BRANCH_NAME \
              --base main \
              --repo $REPO

            cd ..
          done
